name: Build and Deploy STOSCBot
permissions:
  contents: read
  pull-requests: write

on:
  push:
    branches:
      - '*'

jobs:
  Build_Lint_Test_Coverage:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      # Setup uv with Python (uv will handle toolchain + caching of interpreter)
      - name: Setup uv (Python 3.12)
        uses: astral-sh/setup-uv@v4
        with:
          python-version: '3.12'

      - name: Cache uv environments
        uses: actions/cache@v4
        with:
          path: |
            .venv
            ~/.cache/uv
          key: ${{ runner.os }}-uv-${{ hashFiles('pyproject.toml', 'uv.lock') }}

      - name: Sync dependencies (prod + test)
        run: |
          uv sync --group test

      - name: Run Tests
        env:
          STOSC_DB_HOST: ${{ secrets.STOSC_DB_HOST }}
          STOSC_DB_PWD: ${{ secrets.STOSC_DB_PWD }}
          STOSC_LOGS: ${{ secrets.STOSC_LOGS }}
          STOSC_TELEGRAM_BOT_TOKEN: ${{ secrets.STOSC_TELEGRAM_BOT_TOKEN }}
          STOSC_DDB_ACCESS_KEY_ID: ${{ secrets.STOSC_DDB_ACCESS_KEY_ID }}
          STOSC_DDB_SECRET_ACCESS_KEY: ${{ secrets.STOSC_DDB_SECRET_ACCESS_KEY }}
          STOSC_XERO_STOSC_TENANT_ID: ${{ secrets.STOSC_XERO_STOSC_TENANT_ID }}
          STOSC_XERO_CLIENT_ID: ${{ secrets.STOSC_XERO_CLIENT_ID }}
          SUPER_ADMIN_TELEGRAM_IDS: ${{ secrets.SUPER_ADMIN_TELEGRAM_IDS }}
          VIBIN_TELEGRAM_ID: ${{ secrets.VIBIN_TELEGRAM_ID }}
          ENV: 'PRO'
          LOGLEVEL: 'INFO'
        run: |
          uv run pytest --cov=./ --cov-report=xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4.0.1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: true

  Version_Code:
    runs-on: ubuntu-latest
    needs: [ Build_Lint_Test_Coverage ]
    # Create versions only on this branch
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@master
        with:
          fetch-depth: 0

      - name: Application Versioning
        id: versioning
        uses: paulhatch/semantic-version@v5.4.0
        with:
          tag_prefix: "v"
          major_pattern: "(MAJOR)"
          minor_pattern: "(MINOR)"
          version_format: "${major}.${minor}.${patch}"
          namespace: ''
          bump_each_commit: true
          search_commit_body: true
          user_format_type: "csv"
      - name: "Update version file"
        run: |
          echo "[version]" > .VERSION
          echo "VERSION=${{ steps.versioning.outputs.version }}" >> .VERSION
          echo "BUILD=$GITHUB_SHA" >> .VERSION
          echo "RELEASE_DATE=$(TZ='Asia/Singapore' date +'%d-%m-%Y %r')" >> .VERSION
          echo "BRANCH=$GITHUB_REF_NAME" >> .VERSION
          cat .VERSION

      - name: Cache stoscbot for next Job
        id: cache-stoscbot
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}
          key: ${{ runner.os }}-stoscbot-${{ github.sha }}

  Deploy_to_VM:
    runs-on: ubuntu-latest
    needs: [ Version_Code ]
    if: ${{ false }}  # A switch to turn on/off the deployment
    env:
      CLOUD_PROVIDER: ${{ secrets.CLOUD_PROVIDER }}   # AWS or Azure

    steps:
      - name: Get Cache for stoscbot workspace
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}
          key: ${{ runner.os }}-stoscbot-${{ github.sha }}

      - name: Set up uv (Python 3.12)
        uses: astral-sh/setup-uv@v4
        with:
          python-version: '3.12'

      - name: Remove unwanted folders
        run: |
          cd ${{ github.workspace }}
          rm -rf .git/ .github/ .gitignore

      # See https://kamrul.dev/dynamically-add-github-actions-ip-to-aws-security-group/
      - name: Setting AWS environment variables..
        if: env.CLOUD_PROVIDER == 'AWS'
        run: |
          echo "AWS_DEFAULT_REGION=ap-southeast-1" >> $GITHUB_ENV
          echo "AWS_SG_NAME=stosc-1-ec2" >> $GITHUB_ENV

      - name: Get Github Actions IP
        id: ip
        uses: haythem/public-ip@v1.3

      - name: Add Github Actions IP to AWS Security group
        if: env.CLOUD_PROVIDER == 'AWS'
        run: |
          aws ec2 authorize-security-group-ingress --group-name ${{ env.AWS_SG_NAME }} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID_GITHUB_ACTIONS }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY_GITHUB_ACTIONS }}
          AWS_DEFAULT_REGION: ${{ env.AWS_DEFAULT_REGION }}

      - name: Add Github Actions IP to Azure Network Security Group
        if: env.CLOUD_PROVIDER == 'Azure'
        run: |
          az login --service-principal -u ${{ secrets.AZURE_CLIENT_ID }} -p ${{ secrets.AZURE_CLIENT_SECRET }} --tenant ${{ secrets.AZURE_TENANT_ID }}
          az network nsg rule create --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} --nsg-name ${{ secrets.AZURE_NSG_NAME }} --name AllowGitHubActionsIP --priority 1000 --source-address-prefixes ${{ steps.ip.outputs.ipv4 }}/32 --source-port-ranges '*' --destination-address-prefixes '*' --destination-port-ranges 22 --access Allow --protocol TCP --description "Allow SSH access from GitHub Actions"
        env:
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          AZURE_RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCE_GROUP }}
          AZURE_NSG_NAME: ${{ secrets.AZURE_NSG_NAME }}

      - name: Stop the bot and clear the folder
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.BOT_HOST }}
          username: ${{ env.CLOUD_PROVIDER == 'Azure' && 'vibinjk' || 'ubuntu' }}
          key: ${{ secrets.BOT_HOST_PRIVATE_KEY }}
          port: 22
          script: |
            ps -ef | grep 'run_stoscbot' | grep -v grep | awk '{print $2}' | xargs kill -9 2> /dev/null
            cd ${{ env.CLOUD_PROVIDER == 'Azure' && '/home/vibinjk/bots/stoscbot/workspace' || '/home/ubuntu/bots/stoscbot/workspace' }}
            rm -rf !\(.venv\)

      - name: Copy Files to VM
        uses: horochx/deploy-via-scp@1.1.0
        with:
          local: ${{ github.workspace }}
          remote: ${{ env.CLOUD_PROVIDER == 'Azure' && '/home/vibinjk/bots/stoscbot/' || '/home/ubuntu/bots/stoscbot/' }}
          host: ${{ secrets.BOT_HOST }}
          port: 22
          user: ${{ env.CLOUD_PROVIDER == 'Azure' && 'vibinjk' || 'ubuntu' }}
          key: ${{ secrets.BOT_HOST_PRIVATE_KEY }}
#
#      - name: Install & Start the bot on VM (uv)
#        uses: appleboy/ssh-action@master
#        with:
#          host: ${{ secrets.BOT_HOST }}
#          username: ${{ env.CLOUD_PROVIDER == 'Azure' && 'vibinjk' || 'ubuntu' }}
#          key: ${{ secrets.BOT_HOST_PRIVATE_KEY }}
#          port: 22
#          script: |
#            cd ${{ env.CLOUD_PROVIDER == 'Azure' && '/home/vibinjk/bots/stoscbot/workspace' || '/home/ubuntu/bots/stoscbot/workspace' }}
#            cp -r ../credentials/* .
#            cp -r ../credentials/.* . 2>/dev/null
#            # Install uv (if not already). It will provision the correct Python automatically.
#            curl -LsSf https://astral.sh/uv/install.sh | sh
#            export PATH="$HOME/.local/bin:$PATH"
#            uv sync --no-dev
#            nohup uv run python run_stoscbot.py > /dev/null 2>&1 &
#
#      - name: Remove Github Actions IP from AWS security group
#        if: env.CLOUD_PROVIDER == 'AWS'
#        run: |
#          aws ec2 revoke-security-group-ingress --group-name ${{ env.AWS_SG_NAME }} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32
#        env:
#          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID_GITHUB_ACTIONS }}
#          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY_GITHUB_ACTIONS }}
#          AWS_DEFAULT_REGION: ${{ env.AWS_DEFAULT_REGION }}
#
#      - name: Remove Github Actions IP from Azure Network Security Group
#        if: env.CLOUD_PROVIDER == 'Azure'
#        run: |
#          az login --service-principal -u ${{ secrets.AZURE_CLIENT_ID }} -p ${{ secrets.AZURE_CLIENT_SECRET }} --tenant ${{ secrets.AZURE_TENANT_ID }}
#          az network nsg rule delete --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} --nsg-name ${{ secrets.AZURE_NSG_NAME }} --name AllowGitHubActionsIP
#        env:
#          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
#          AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
#          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
#          AZURE_RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCE_GROUP }}
#          AZURE_NSG_NAME: ${{ secrets.AZURE_NSG_NAME }}