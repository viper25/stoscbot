name: Build and Deploy STOSCBot

on:
  push:
    branches:
      - '*'

jobs:
  Build_Lint_Test_Coverage:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@master
    - name: Set up Python 3.10
      uses: actions/setup-python@master
      with:
        python-version: "3.10"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest pytest-asyncio pytest-cov
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi    
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Run Tests
      env:
        STOSC_DB_HOST: ${{ secrets.STOSC_DB_HOST }}
        STOSC_DB_PWD: ${{ secrets.STOSC_DB_PWD }}
        STOSC_LOGS: ${{ secrets.STOSC_LOGS }}
        STOSC_TELEGRAM_BOT_TOKEN: ${{ secrets.STOSC_TELEGRAM_BOT_TOKEN }}
        STOSC_DDB_ACCESS_KEY_ID: ${{ secrets.STOSC_DDB_ACCESS_KEY_ID }}
        STOSC_DDB_SECRET_ACCESS_KEY: ${{ secrets.STOSC_DDB_SECRET_ACCESS_KEY }}
        STOSC_XERO_STOSC_TENANT_ID: ${{ secrets.STOSC_XERO_STOSC_TENANT_ID }}
        STOSC_XERO_CLIENT_ID: ${{ secrets.STOSC_XERO_CLIENT_ID }}
        VIBIN_TELEGRAM_ID: ${{ secrets.VIBIN_TELEGRAM_ID }}
        ENV: 'PRO'
        LOGLEVEL: 'INFO'
      run: |
        pytest --cov=./ --cov-report=xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        fail_ci_if_error: true

  Version_Code:
    runs-on: ubuntu-latest
    needs: [ Build_Lint_Test_Coverage ]
    # Create versions only on this branch
    if: github.ref == 'refs/heads/main'
    steps:
    - name: Checkout
      uses: actions/checkout@master
      with:
        fetch-depth: 0

    - name: Application Versioning
      id: versioning
      uses: paulhatch/semantic-version@v4.0.2
      with:
        tag_prefix: "v"
        major_pattern: "(MAJOR)"
        minor_pattern: "(MINOR)"
        format: "${major}.${minor}.${patch}"
        namespace: ''
        bump_each_commit: true
        search_commit_body: true
        user_format_type: "csv"
    - name: "Update version file"
      run: |
        echo "[version]" > .VERSION
        echo "VERSION=${{ steps.versioning.outputs.version }}" >> .VERSION
        echo "BUILD=$GITHUB_SHA" >> .VERSION
        echo "RELEASE_DATE=$(TZ='Asia/Singapore' date +'%d-%m-%Y %r')" >> .VERSION
        echo "BRANCH=$GITHUB_REF_NAME" >> .VERSION
        cat .VERSION

    - name: Cache stoscbot for next Job
      id: cache-stoscbot
      uses: actions/cache@v3
      with:
        path: ${{ github.workspace }}
        key: ${{ runner.os }}-stoscbot-${{ github.sha }}

  Deploy_to_VM:
    runs-on: ubuntu-latest
    needs: [ Version_Code ]
    # Deploy only if from the main branch
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Get Cache for stoscbot workspace
      id: cache-stoscbot
      uses: actions/cache@v3
      with:
        path: ${{ github.workspace }}
        key: ${{ runner.os }}-stoscbot-${{ github.sha }}

    - name: Set up Python 3.10
      uses: actions/setup-python@master
      with:
        python-version: "3.10"

    - name: Remove unwanted folders
      run: |
        cd ${{ github.workspace }}
        rm -rf .git/ .github/ .gitignore
    # See https://kamrul.dev/dynamically-add-github-actions-ip-to-aws-security-group/
    - name: Setting environment variables..
      run: |
        echo "AWS_DEFAULT_REGION=ap-southeast-1" >> $GITHUB_ENV
        echo "AWS_SG_NAME=stosc" >> $GITHUB_ENV

    - name: Get Github action IP
      id: ip
      uses: haythem/public-ip@v1.2

    - name: Add Github Actions IP to Security group
      run: |
          aws ec2 authorize-security-group-ingress --group-name ${{ env.AWS_SG_NAME }} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32 
      env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID_GITHUB_ACTIONS }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY_GITHUB_ACTIONS }}
          AWS_DEFAULT_REGION: ${{ env.AWS_DEFAULT_REGION }}
        
    - name: Stop the bot and clear the folder
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.BOT_HOST }}
        username: ubuntu
        key: ${{ secrets.BOT_HOST_KEY }}
        port: 22
        debug: false
        script: |
          ps -ef | grep 'run_stoscbot' | grep -v grep | awk '{print $2}' | xargs kill -9 2> /dev/null
          cd /home/ubuntu/bots/stoscbot/workspace
          rm -rf !\(.venv\)
    # Alternative: rsync -av -e ssh --delete --exclude='.git' --exclude='.session' --exclude='.session-journal' --exclude='.venv' --exclude='*.sh' --exclude='**/__pycache__' --exclude='.gitignore' --exclude='.env' --exclude='.vscode' . vibinjk@xxxx:/home/vibinjk/stoscbot          
    - name: Copy Files to AWS EC2
      uses: horochx/deploy-via-scp@1.1.0
      with:
        local: ${{ github.workspace }}
        remote: /home/ubuntu/bots/stoscbot/
        host:  ${{ secrets.BOT_HOST }}
        port: 22
        user: ubuntu
        key: ${{ secrets.BOT_HOST_KEY }}
        # Ensure the existence of the remote file path
        ensureRemote: # optional

    # sudo apt install python3.10-venv
    - name: Install & Start the bot on Azure VM
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.BOT_HOST }}
        username: ubuntu
        key: ${{ secrets.BOT_HOST_KEY }}
        port: 22
        script: |
          cd /home/ubuntu/bots/stoscbot/workspace
          cp ../credentials/* .
          cp ../credentials/.* .
          python3 -m venv .venv
          source .venv/bin/activate
          if [ -f requirements.txt ]; then pip install --upgrade -r requirements.txt; fi
          nohup python3 run_stoscbot.py > /dev/null 2>&1 &

    - name: Remove Github Actions IP from security group
      run: |
        aws ec2 revoke-security-group-ingress --group-name ${{ env.AWS_SG_NAME }} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID_GITHUB_ACTIONS }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY_GITHUB_ACTIONS }}
        AWS_DEFAULT_REGION: ${{ env.AWS_DEFAULT_REGION }}
      if: always()